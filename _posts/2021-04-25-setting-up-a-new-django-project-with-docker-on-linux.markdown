---
layout: post
title:  "Setting up a new Django project with Docker on Linux"
date:   2021-04-25
categories: django docker
---
Starting up a brand new Django project is not something I'm doing on a day-to-day basis, so I had to refresh my memory.

I like using [Docker](www.docker.com) for local development, and I found [this guide](https://docs.docker.com/samples/django/) from Docker. I built up a simple `docker-compose.yml` file to spin up two containers: `web` which hosts the Django project and `db` which hosts the PostgreSQL database.


In my working life, the developers use MacBooks, and my computer for personal use is a PC, so I'm running Linux (Linux Mint, how pedestrian).  One thing I noticed straight away was that when creating files from within the running Docker container (`./manage.py startapp MyApp`, for example), the files are owned by `root` and then I'd have to `chown` and `chgrp` all the generated files in order for PyCharm to let me edit them.

I found this [great post](https://medium.com/redbubble/running-a-docker-container-as-a-non-root-user-7d2e00f8ee15) entitled, "Running a Docker container as a non-root user" which helped me out in that regard.  Here's the final result:

## docker-compose.yml
{% highlight yaml %}
version: '3.7'

services:
  web:
    build: ./
    command: python manage.py runserver_plus 0.0.0.0:8000
    volumes:
      - ./:/usr/src
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev
    user: ${CURRENT_UID}

  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=<user name>
      - POSTGRES_PASSWORD=<password>
      - POSTGRES_DB=<database name>

volumes:
  postgres_data:
{% endhighlight %}

The trick from the linked post above is `user: ${CURRENT_UID}`.  Then I pass `CURRENT_UID` in through a simple script:

## dockerup.sh
{% highlight yaml %}
#!/usr/bin/bash

CURRENT_UID=$(id -u):$(id -g) docker-compose up -d
{% endhighlight %}

Now I can run `./dockerup.sh`, any files generated by Django will be owned by the current user and won't require any messing around with ownership or groups

For completeness, here's the dockerfile

## Dockerfile
{% highlight yaml %}
# pull official base image
FROM python:3

# set work directory
WORKDIR /usr/src/

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

# copy project
COPY . .
{% endhighlight %}

